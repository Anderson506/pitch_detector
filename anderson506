<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pitch Detector for Voice Training</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
        }
        
        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .controls {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 30px;
            justify-content: center;
            align-items: center;
        }
        
        button {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        
        #startBtn {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
        }
        
        #stopBtn {
            background: linear-gradient(45deg, #f44336, #da190b);
            color: white;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }
        
        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        select, input {
            padding: 10px;
            border: none;
            border-radius: 15px;
            font-size: 14px;
            background: rgba(255, 255, 255, 0.9);
            color: #333;
        }
        
        .pitch-display {
            text-align: center;
            margin: 30px 0;
            padding: 40px;
            background: rgba(255, 255, 255, 0.15);
            border-radius: 20px;
            min-height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        
        .current-note {
            font-size: 4em;
            font-weight: bold;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .frequency {
            font-size: 1.5em;
            margin-bottom: 20px;
            opacity: 0.9;
        }
        
        .tuning-status {
            font-size: 2em;
            font-weight: bold;
            padding: 15px;
            border-radius: 15px;
            margin: 20px 0;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        }
        
        .in-tune {
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
        }
        
        .sharp {
            background: linear-gradient(45deg, #ff9800, #f57c00);
            color: white;
        }
        
        .flat {
            background: linear-gradient(45deg, #2196F3, #1976D2);
            color: white;
        }
        
        .pitch-meter {
            width: 100%;
            height: 20px;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            margin: 20px 0;
            position: relative;
            overflow: hidden;
        }
        
        .pitch-indicator {
            height: 100%;
            width: 6px;
            background: #fff;
            border-radius: 3px;
            position: absolute;
            transition: left 0.1s ease;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.8);
        }
        
        .target-note {
            margin: 20px 0;
            text-align: center;
        }
        
        .instructions {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
            margin-top: 30px;
            line-height: 1.6;
        }
        
        .cents-display {
            font-size: 1.2em;
            margin: 10px 0;
            opacity: 0.8;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸŽµ Voice Pitch Detector</h1>
        
        <div class="controls">
            <button id="startBtn">Start Listening</button>
            <button id="stopBtn" disabled>Stop</button>
            
            <select id="targetNote">
                <option value="C4">C4 (Middle C)</option>
                <option value="C#4">C#4/Db4</option>
                <option value="D4">D4</option>
                <option value="D#4">D#4/Eb4</option>
                <option value="E4">E4</option>
                <option value="F4">F4</option>
                <option value="F#4">F#4/Gb4</option>
                <option value="G4">G4</option>
                <option value="G#4">G#4/Ab4</option>
                <option value="A4" selected>A4 (440 Hz)</option>
                <option value="A#4">A#4/Bb4</option>
                <option value="B4">B4</option>
                <option value="C5">C5 (High C)</option>
            </select>
            
            <label>
                Sensitivity:
                <input type="range" id="sensitivity" min="5" max="50" value="20">
            </label>
        </div>
        
        <div class="target-note">
            <strong>Target Note: <span id="targetDisplay">A4 (440 Hz)</span></strong>
        </div>
        
        <div class="pitch-display">
            <div class="current-note" id="currentNote">â™ª</div>
            <div class="frequency" id="frequency">Frequency: --</div>
            <div class="cents-display" id="cents">Cents: --</div>
            
            <div class="pitch-meter">
                <div class="pitch-indicator" id="pitchIndicator"></div>
            </div>
            
            <div class="tuning-status" id="tuningStatus">Click "Start Listening" to begin</div>
        </div>
        
        <div class="instructions">
            <h3>How to Use:</h3>
            <p><strong>1.</strong> Click "Start Listening" and allow microphone access</p>
            <p><strong>2.</strong> Select the target note you want to practice</p>
            <p><strong>3.</strong> Sing or hum the note - the tool will show if you're sharp, flat, or in tune</p>
            <p><strong>4.</strong> Adjust the sensitivity slider if needed</p>
            <p><strong>Green = In Tune</strong> | <strong>Orange = Sharp (too high)</strong> | <strong>Blue = Flat (too low)</strong></p>
        </div>
    </div>

    <script>
        class PitchDetector {
            constructor() {
                this.audioContext = null;
                this.mediaStream = null;
                this.analyser = null;
                this.dataArray = null;
                this.isListening = false;
                
                this.noteFrequencies = {
                    'C4': 261.63, 'C#4': 277.18, 'D4': 293.66, 'D#4': 311.13,
                    'E4': 329.63, 'F4': 349.23, 'F#4': 369.99, 'G4': 392.00,
                    'G#4': 415.30, 'A4': 440.00, 'A#4': 466.16, 'B4': 493.88,
                    'C5': 523.25
                };
                
                this.noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
                
                this.setupEventListeners();
            }
            
            setupEventListeners() {
                document.getElementById('startBtn').addEventListener('click', () => this.startListening());
                document.getElementById('stopBtn').addEventListener('click', () => this.stopListening());
                document.getElementById('targetNote').addEventListener('change', () => this.updateTarget());
            }
            
            async startListening() {
                try {
                    this.mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });
                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                    
                    const source = this.audioContext.createMediaStreamSource(this.mediaStream);
                    this.analyser = this.audioContext.createAnalyser();
                    this.analyser.fftSize = 8192;
                    this.analyser.smoothingTimeConstant = 0.8;
                    
                    source.connect(this.analyser);
                    
                    this.dataArray = new Float32Array(this.analyser.frequencyBinCount);
                    
                    this.isListening = true;
                    document.getElementById('startBtn').disabled = true;
                    document.getElementById('stopBtn').disabled = false;
                    
                    this.updateTarget();
                    this.detectPitch();
                    
                } catch (error) {
                    alert('Error accessing microphone: ' + error.message);
                }
            }
            
            stopListening() {
                this.isListening = false;
                
                if (this.mediaStream) {
                    this.mediaStream.getTracks().forEach(track => track.stop());
                }
                
                if (this.audioContext) {
                    this.audioContext.close();
                }
                
                document.getElementById('startBtn').disabled = false;
                document.getElementById('stopBtn').disabled = true;
                document.getElementById('tuningStatus').textContent = 'Stopped';
                document.getElementById('tuningStatus').className = 'tuning-status';
            }
            
            detectPitch() {
                if (!this.isListening) return;
                
                this.analyser.getFloatTimeDomainData(this.dataArray);
                
                const pitch = this.autoCorrelate(this.dataArray, this.audioContext.sampleRate);
                
                if (pitch > 0) {
                    this.updateDisplay(pitch);
                }
                
                requestAnimationFrame(() => this.detectPitch());
            }
            
            autoCorrelate(buffer, sampleRate) {
                const SIZE = buffer.length;
                const MAX_SAMPLES = Math.floor(SIZE / 2);
                let bestOffset = -1;
                let bestCorrelation = 0;
                let rms = 0;
                
                for (let i = 0; i < SIZE; i++) {
                    const val = buffer[i];
                    rms += val * val;
                }
                rms = Math.sqrt(rms / SIZE);
                
                if (rms < 0.01) return -1;
                
                let lastCorrelation = 1;
                for (let offset = 1; offset < MAX_SAMPLES; offset++) {
                    let correlation = 0;
                    
                    for (let i = 0; i < MAX_SAMPLES; i++) {
                        correlation += Math.abs((buffer[i]) - (buffer[i + offset]));
                    }
                    correlation = 1 - (correlation / MAX_SAMPLES);
                    
                    if (correlation > 0.9 && correlation > lastCorrelation) {
                        bestCorrelation = correlation;
                        bestOffset = offset;
                        break;
                    } else {
                        lastCorrelation = correlation;
                    }
                }
                
                if (bestCorrelation > 0.01) {
                    return sampleRate / bestOffset;
                }
                return -1;
            }
            
            updateDisplay(frequency) {
                const targetNote = document.getElementById('targetNote').value;
                const targetFreq = this.noteFrequencies[targetNote];
                const sensitivity = parseInt(document.getElementById('sensitivity').value);
                
                const cents = this.frequencyToCents(frequency, targetFreq);
                const noteName = this.frequencyToNoteName(frequency);
                
                document.getElementById('currentNote').textContent = noteName;
                document.getElementById('frequency').textContent = `Frequency: ${frequency.toFixed(1)} Hz`;
                document.getElementById('cents').textContent = `Cents: ${cents > 0 ? '+' : ''}${cents.toFixed(0)}`;
                
                const statusElement = document.getElementById('tuningStatus');
                const indicatorElement = document.getElementById('pitchIndicator');
                
                // Update pitch meter (center is 50%, range is Â±100 cents)
                const meterPosition = Math.max(0, Math.min(100, 50 + (cents / 100) * 50));
                indicatorElement.style.left = `${meterPosition}%`;
                
                if (Math.abs(cents) <= sensitivity) {
                    statusElement.textContent = 'âœ“ In Tune!';
                    statusElement.className = 'tuning-status in-tune';
                } else if (cents > sensitivity) {
                    statusElement.textContent = 'â†‘ Sharp (too high)';
                    statusElement.className = 'tuning-status sharp';
                } else {
                    statusElement.textContent = 'â†“ Flat (too low)';
                    statusElement.className = 'tuning-status flat';
                }
            }
            
            frequencyToCents(freq, targetFreq) {
                return Math.round(1200 * Math.log2(freq / targetFreq));
            }
            
            frequencyToNoteName(frequency) {
                const A4 = 440;
                const C0 = A4 * Math.pow(2, -4.75);
                
                if (frequency > C0) {
                    const h = Math.round(12 * Math.log2(frequency / C0));
                    const octave = Math.floor(h / 12);
                    const n = h % 12;
                    return this.noteNames[n] + octave;
                }
                return '';
            }
            
            updateTarget() {
                const targetNote = document.getElementById('targetNote').value;
                const frequency = this.noteFrequencies[targetNote];
                document.getElementById('targetDisplay').textContent = `${targetNote} (${frequency} Hz)`;
            }
        }
        
        // Initialize the pitch detector when the page loads
        window.addEventListener('load', () => {
            new PitchDetector();
        });
    </script>
</body>
</html>
